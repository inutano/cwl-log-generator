#! /usr/bin/env ruby
# generate_cwl_log: assemble cwltool log data with container environment information
#

$LOAD_PATH << __dir__
$LOAD_PATH << File.join(__dir__, "lib")

require 'getoptlong'
require 'lib/cwllog'

if __FILE__ == $0
  output_dir = ''

  opts = GetoptLong.new(
    ['--debug-output', GetoptLong::REQUIRED_ARGUMENT],
    ['--job-conf', GetoptLong::OPTIONAL_ARGUMENT],
    ['--docker-ps', GetoptLong::OPTIONAL_ARGUMENT],
    ['--docker-info', GetoptLong::OPTIONAL_ARGUMENT],
    ['--output-dir', '-o', GetoptLong::OPTIONAL_ARGUMENT],
  )

  opts.each do |opt, arg|
    case opt
    when '--debug-output'
      CWLlog::CWL::DebugInfo.load(arg) # --debug output with timestamps
    when '--job-conf'
      CWLlog::CWL::JobConf.load(arg) # job conf yaml or json
    when '--docker-ps'
      CWLlog::Docker.load_docker_ps(arg)
    when '--docker-info'
      CWLlog::Docker.load_docker_info(arg)
    when '--output-dir'
      output_dir = arg
    end
  end

  begin
    cwl_log_json = CWLlog.generate
  rescue => e
    error_out_dir = output_dir || "."
    error_out_file = "#{output_dir}/cwl_log_generator.error.log"
    open(error_out_file, 'w'){|f| f.puts(e.inspect); f.puts(e.backtrace) }
    exit 1
  end

  if File.directory?(output_dir)
    out_file = File.join(output_dir, "cwl_log.json")
    open(out_file, 'w'){|f| f.puts(cwl_log_json)}
  else
    puts cwl_log_json
  end
end
